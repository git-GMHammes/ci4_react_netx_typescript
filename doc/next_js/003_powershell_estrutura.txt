
# Caminho base
$basePath = "C:\laragon\www\ci4_react_netx_typescript\src\public\script\my_modulo_v2\src\"

# Funcao para criar um diretorio se nao existir
function Criar-Diretorio {
    param($caminho)
    if (-not (Test-Path $caminho)) {
        New-Item -Path $caminho -ItemType Directory -Force
        Write-Host "Diretorio criado: $caminho" -ForegroundColor Green
    } else {
        Write-Host "Diretorio ja existe: $caminho" -ForegroundColor Yellow
    }
}

# Funcao para criar um arquivo se nao existir
function Criar-Arquivo {
    param($caminho, $conteudo)
    if (-not (Test-Path $caminho)) {
        New-Item -Path $caminho -ItemType File -Force
        Set-Content -Path $caminho -Value $conteudo
        Write-Host "Arquivo criado: $caminho" -ForegroundColor Green
    } else {
        Write-Host "Arquivo ja existe: $caminho" -ForegroundColor Yellow
    }
}

# Criacao das pastas de componentes
Criar-Diretorio "$basePath\app\about"
Criar-Diretorio "$basePath\components\Header"
Criar-Diretorio "$basePath\components\MenuNav"
Criar-Diretorio "$basePath\components\Footer"

# Criacao das pastas adicionais da estrutura moderna
Criar-Diretorio "$basePath\services"
Criar-Diretorio "$basePath\utils"
Criar-Diretorio "$basePath\hooks"
Criar-Diretorio "$basePath\context"
Criar-Diretorio "$basePath\types"
Criar-Diretorio "$basePath\styles"

# Conteudo dos arquivos
$pageModuleCss = @"
.home {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
  text-align: center;
}

.title {
  color: #3498db;
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.description {
  color: #555;
  max-width: 800px;
  line-height: 1.6;
}
"@

$aboutPageTsx = @"
import styles from './page.module.css';

export default function About() {
  return (
    <div className={styles.about}>
      <h1 className={styles.title}>Sobre Nos</h1>
      <p className={styles.description}>
        Esta é a pagina Sobre, que demonstra como criar multiplas paginas no Next.js
        usando o App Router. Cada pagina tem seu proprio arquivo CSS modular.
      </p>
    </div>
  );
}
"@

$aboutPageModuleCss = @"
.about {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.title {
  color: #e74c3c;
  font-size: 2.5rem;
  border-bottom: 2px solid #e74c3c;
  padding-bottom: 0.5rem;
}

.description {
  color: #333;
  line-height: 1.6;
  background-color: #f9f9f9;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}
"@

$headerTsx = @"
import styles from './Header.module.css';

export default function Header() {
  return (
    <header className={styles.header}>
      <h1>Meu Projeto Next.js</h1>
    </header>
  );
}
"@

$headerModuleCss = @"
.header {
  background-color: #2c3e50;
  color: white;
  padding: 1rem;
  text-align: center;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
"@

$menuNavTsx = @"
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import styles from './MenuNav.module.css';

export default function MenuNav() {
  const pathname = usePathname();
  
  return (
    <nav className={styles.nav}>
      <ul className={styles.navList}>
        <li className={pathname === '/' ? styles.active : ''}>
          <Link href="/">Home</Link>
        </li>
        <li className={pathname === '/about' ? styles.active : ''}>
          <Link href="/about">Sobre</Link>
        </li>
      </ul>
    </nav>
  );
}
"@

$menuNavModuleCss = @"
.nav {
  background-color: #34495e;
  padding: 0.5rem 1rem;
}

.navList {
  display: flex;
  list-style: none;
  margin: 0;
  padding: 0;
  gap: 1rem;
  justify-content: center;
}

.navList li a {
  color: white;
  text-decoration: none;
  padding: 0.5rem 1rem;
  display: block;
  transition: all 0.3s ease;
}

.navList li a:hover {
  background-color: #4a6380;
  border-radius: 4px;
}

.navList li.active a {
  background-color: #3498db;
  border-radius: 4px;
}
"@

$footerTsx = @"
import styles from './Footer.module.css';

export default function Footer() {
  return (
    <footer className={styles.footer}>
      <p>&copy; {new Date().getFullYear()} - Meu Projeto Next.js</p>
    </footer>
  );
}
"@

$footerModuleCss = @"
.footer {
  background-color: #2c3e50;
  color: white;
  padding: 1rem;
  text-align: center;
  margin-top: auto;
}
"@

# Arquivos de Servicos
$apiServiceTs = @"
/**
 * Servico para manipulacao de requisicoes API
 */
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://api.example.com';

export interface ApiResponse<T> {
  data?: T;
  error?: string;
  status: number;
}

/**
 * Funcao genérica para fazer requisicoes à API
 */
export async function fetchApi<T>(
  endpoint: string, 
  options: RequestInit = {}
): Promise<ApiResponse<T>> {
  const url = `${API_URL}${endpoint}`;
  
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });
    
    const data = await response.json();
    
    return {
      data: response.ok ? data : undefined,
      error: !response.ok ? data.message || 'Ocorreu um erro' : undefined,
      status: response.status,
    };
  } catch (error) {
    return {
      error: 'Erro de conexao com o servidor',
      status: 500,
    };
  }
}

export const ApiService = {
  get: <T>(endpoint: string) => fetchApi<T>(endpoint),
  
  post: <T>(endpoint: string, body: any) => fetchApi<T>(endpoint, {
    method: 'POST',
    body: JSON.stringify(body),
  }),
  
  put: <T>(endpoint: string, body: any) => fetchApi<T>(endpoint, {
    method: 'PUT',
    body: JSON.stringify(body),
  }),
  
  delete: <T>(endpoint: string) => fetchApi<T>(endpoint, {
    method: 'DELETE',
  }),
};

export default ApiService;
"@

# Arquivo de utilitario
$utilsFormatTs = @"
/**
 * Funcoes utilitarias para formatacao
 */

/**
 * Formata uma data para o formato brasileiro
 */
export const formatDate = (date: Date | string): string => {
  const dateObj = date instanceof Date ? date : new Date(date);
  return dateObj.toLocaleDateString('pt-BR', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
};

/**
 * Formata um valor para moeda brasileira
 */
export const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL',
  }).format(value);
};

/**
 * Trunca um texto com limite de caracteres
 */
export const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) return text;
  return `${text.slice(0, maxLength)}...`;
};
"@

# Arquivo de hook personalizado
$useLocalStorageTs = @"
'use client';

import { useState, useEffect } from 'react';

/**
 * Hook para persistir estado no localStorage
 */
export function useLocalStorage<T>(key: string, initialValue: T) {
  const [storedValue, setStoredValue] = useState<T>(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }
    
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error('Error reading localStorage key:', error);
      return initialValue;
    }
  });
  
  useEffect(() => {
    if (typeof window !== 'undefined') {
      try {
        window.localStorage.setItem(key, JSON.stringify(storedValue));
      } catch (error) {
        console.error('Error setting localStorage key:', error);
      }
    }
  }, [key, storedValue]);
  
  return [storedValue, setStoredValue] as const;
}

export default useLocalStorage;
"@

# Arquivo de contexto
$themeContextTs = @"
'use client';

import React, { createContext, useContext, useState, ReactNode } from 'react';

type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: ReactNode }) {
  const [theme, setTheme] = useState<Theme>('light');

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme deve ser usado dentro de um ThemeProvider');
  }
  return context;
}
"@

# Arquivo de tipos
$typesTs = @"
/**
 * Tipos globais da aplicacao
 */

export interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user' | 'guest';
  avatar?: string;
}

export interface PageInfo {
  currentPage: number;
  totalPages: number;
  totalItems: number;
  itemsPerPage: number;
}

export interface ApiPaginatedResponse<T> {
  data: T[];
  pageInfo: PageInfo;
}
"@

# Criar arquivos
Criar-Arquivo "$basePath\app\page.module.css" $pageModuleCss
Criar-Arquivo "$basePath\app\about\page.tsx" $aboutPageTsx
Criar-Arquivo "$basePath\app\about\page.module.css" $aboutPageModuleCss
Criar-Arquivo "$basePath\components\Header\Header.tsx" $headerTsx
Criar-Arquivo "$basePath\components\Header\Header.module.css" $headerModuleCss
Criar-Arquivo "$basePath\components\MenuNav\MenuNav.tsx" $menuNavTsx
Criar-Arquivo "$basePath\components\MenuNav\MenuNav.module.css" $menuNavModuleCss
Criar-Arquivo "$basePath\components\Footer\Footer.tsx" $footerTsx
Criar-Arquivo "$basePath\components\Footer\Footer.module.css" $footerModuleCss

# Criar arquivos adicionais para as outras pastas
Criar-Arquivo "$basePath\services\api.service.ts" $apiServiceTs
Criar-Arquivo "$basePath\utils\format.ts" $utilsFormatTs
Criar-Arquivo "$basePath\hooks\useLocalStorage.ts" $useLocalStorageTs
Criar-Arquivo "$basePath\context\ThemeContext.tsx" $themeContextTs
Criar-Arquivo "$basePath\types\index.ts" $typesTs

Write-Host "`nEstrutura completa criada com sucesso!" -ForegroundColor Cyan
Write-Host "Para visualizar o projeto, execute 'npm run dev' no diretorio raiz do projeto." -ForegroundColor Cyan