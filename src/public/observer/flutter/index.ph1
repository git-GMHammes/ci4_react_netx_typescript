<?php
/**
 * Script para exibir a estrutura de diret√≥rios em formato de √°rvore
 * Compat√≠vel com CodeIgniter 4
 * Vers√£o melhorada com tratamento de erros e seguran√ßa
 */

// Fun√ß√£o para verificar se o diret√≥rio deve ser ignorado
function deveIgnorarDiretorio($nomeDiretorio) {
    $diretorios_ignorados = [
        'node_modules',
        'system',
        'debugbar', 
        'session',
        'logs',
        'uploads',
        '.git',
        'vendor',
        'cache',
        'writable/cache',
        'writable/logs',
        'writable/session',
        'writable/debugbar'
    ];
    
    return in_array($nomeDiretorio, $diretorios_ignorados);
}

// Fun√ß√£o para verificar se o arquivo deve ser ignorado
function deveIgnorarArquivo($nomeArquivo) {
    $arquivos_ignorados = [
        '.htaccess',
        '.env',
        '.gitignore',
        'composer.lock',
        'package-lock.json'
    ];
    
    $extensoes_ignoradas = [
        'log',
        'tmp',
        'cache'
    ];
    
    if (in_array($nomeArquivo, $arquivos_ignorados)) {
        return true;
    }
    
    $extensao = strtolower(pathinfo($nomeArquivo, PATHINFO_EXTENSION));
    return in_array($extensao, $extensoes_ignoradas);
}

// Fun√ß√£o recursiva melhorada para exibir a estrutura
function exibirEstrutura($diretorio, $prefixo = '', $nivel = 0) {
    // Limite de profundidade para evitar loops infinitos
    if ($nivel > 10) {
        echo $prefixo . "... (limite de profundidade atingido)" . PHP_EOL;
        return;
    }
    
    // Verifica se o diret√≥rio existe e √© leg√≠vel
    if (!is_dir($diretorio) || !is_readable($diretorio)) {
        echo $prefixo . "‚ùå Diret√≥rio n√£o acess√≠vel: " . basename($diretorio) . PHP_EOL;
        return;
    }
    
    // Verifica se deve ignorar este diret√≥rio
    $dirName = basename($diretorio);
    if (deveIgnorarDiretorio($dirName)) {
        return;
    }
    
    try {
        // Lista os arquivos e pastas do diret√≥rio
        $itens = scandir($diretorio);
        if ($itens === false) {
            echo $prefixo . "‚ùå Erro ao ler diret√≥rio: " . $dirName . PHP_EOL;
            return;
        }
        
        // Arrays para armazenar diret√≥rios e arquivos separadamente
        $diretorios = [];
        $arquivos = [];
        
        // Separa e filtra diret√≥rios e arquivos
        foreach ($itens as $item) {
            if ($item === '.' || $item === '..') {
                continue;
            }
            
            $caminho = $diretorio . DIRECTORY_SEPARATOR . $item;
            
            if (is_dir($caminho)) {
                if (!deveIgnorarDiretorio($item)) {
                    $diretorios[] = $item;
                }
            } else {
                if (!deveIgnorarArquivo($item)) {
                    $arquivos[] = $item;
                }
            }
        }
        
        // Ordena os arrays
        sort($diretorios);
        sort($arquivos);
        
        // Combina os arrays, diret√≥rios primeiro
        $todos = array_merge($diretorios, $arquivos);
        $total = count($todos);
        
        // Exibe cada item
        for ($i = 0; $i < $total; $i++) {
            $item = $todos[$i];
            $caminho = $diretorio . DIRECTORY_SEPARATOR . $item;
            $isUltimo = ($i == $total - 1);
            
            // S√≠mbolos da √°rvore
            $simbolo = $isUltimo ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ";
            echo $prefixo . $simbolo;
            
            if (is_dir($caminho)) {
                // √â um diret√≥rio
                echo "üìÅ " . $item . DIRECTORY_SEPARATOR . PHP_EOL;
                
                // Prefixo para o pr√≥ximo n√≠vel
                $novoPrefixo = $prefixo . ($isUltimo ? "    " : "‚îÇ   ");
                
                // Chamada recursiva
                exibirEstrutura($caminho, $novoPrefixo, $nivel + 1);
            } else {
                // √â um arquivo
                $extensao = pathinfo($item, PATHINFO_EXTENSION);
                $tamanho = filesize($caminho);
                $tamanhoFormatado = formatarTamanho($tamanho);
                
                // √çcone baseado na extens√£o
                $icone = obterIconeArquivo($extensao);
                
                echo $icone . " " . $item;
                if ($extensao) {
                    echo " (." . $extensao . ")";
                }
                echo " [" . $tamanhoFormatado . "]" . PHP_EOL;
            }
        }
        
    } catch (Exception $e) {
        echo $prefixo . "‚ùå Erro: " . $e->getMessage() . PHP_EOL;
    }
}

// Fun√ß√£o para formatar tamanho de arquivo
function formatarTamanho($bytes) {
    if ($bytes < 1024) return $bytes . ' B';
    if ($bytes < 1048576) return round($bytes / 1024, 1) . ' KB';
    if ($bytes < 1073741824) return round($bytes / 1048576, 1) . ' MB';
    return round($bytes / 1073741824, 1) . ' GB';
}

// Fun√ß√£o para obter √≠cone baseado na extens√£o do arquivo
function obterIconeArquivo($extensao) {
    $icones = [
        'php' => 'üêò',
        'js' => 'üìú',
        'css' => 'üé®',
        'html' => 'üåê',
        'json' => 'üìã',
        'xml' => 'üìÑ',
        'txt' => 'üìù',
        'md' => 'üìñ',
        'sql' => 'üóÉÔ∏è',
        'png' => 'üñºÔ∏è',
        'jpg' => 'üñºÔ∏è',
        'jpeg' => 'üñºÔ∏è',
        'gif' => 'üñºÔ∏è',
        'pdf' => 'üìï',
        'zip' => 'üì¶',
        'dart' => 'üéØ'
    ];
    
    return $icones[strtolower($extensao)] ?? 'üìÑ';
}

// Configura√ß√£o de sa√≠da
header('Content-Type: text/plain; charset=utf-8');

// Cabe√ßalho informativo
echo "üå≥ ESTRUTURA DE DIRET√ìRIOS - FLUTTER PROJECT" . PHP_EOL;
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" . PHP_EOL;
echo "üìç Local: CodeIgniter 4 - Public Directory" . PHP_EOL;
echo "‚è∞ Data: " . date('d/m/Y H:i:s') . PHP_EOL;
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" . PHP_EOL;
echo PHP_EOL;

// Caminho do diret√≥rio Flutter
$caminhoFlutter = '../modelo_v1';

// Debug: mostra informa√ß√µes do ambiente
echo "üîç INFORMA√á√ïES DE DEBUG:" . PHP_EOL;
echo "   ‚Ä¢ Diret√≥rio atual: " . __DIR__ . PHP_EOL;
echo "   ‚Ä¢ Caminho procurado: " . $caminhoFlutter . PHP_EOL;
echo "   ‚Ä¢ Caminho absoluto: " . realpath($caminhoFlutter) . PHP_EOL;
echo "   ‚Ä¢ Existe? " . (file_exists($caminhoFlutter) ? "‚úÖ SIM" : "‚ùå N√ÉO") . PHP_EOL;
echo PHP_EOL;

// Verifica se o diret√≥rio existe
if (!file_exists($caminhoFlutter)) {
    echo "‚ùå ERRO: Diret√≥rio modelo_v1 n√£o encontrado!" . PHP_EOL;
    echo "üìÇ Caminho procurado: " . realpath('.') . PHP_EOL;
    echo PHP_EOL;
    
    // Lista o conte√∫do do diret√≥rio atual para debug
    echo "üìÅ Conte√∫do do diret√≥rio atual (observer/flutter/):" . PHP_EOL;
    $itensAtual = scandir('.');
    foreach ($itensAtual as $item) {
        if ($item !== '.' && $item !== '..') {
            echo "   ‚Ä¢ " . $item . (is_dir($item) ? '/' : '') . PHP_EOL;
        }
    }
    echo PHP_EOL;
    
    // Lista o diret√≥rio pai
    echo "üìÅ Conte√∫do do diret√≥rio pai (public/):" . PHP_EOL;
    $itensPai = scandir('..');
    foreach ($itensPai as $item) {
        if ($item !== '.' && $item !== '..') {
            echo "   ‚Ä¢ " . $item . (is_dir('../' . $item) ? '/' : '') . PHP_EOL;
        }
    }
    
    echo PHP_EOL;
    echo "üí° Dicas para resolver:" . PHP_EOL;
    echo "   ‚Ä¢ Verifique se o caminho est√° correto" . PHP_EOL;
    echo "   ‚Ä¢ Confirme se o diret√≥rio modelo_v1 existe" . PHP_EOL;
    echo "   ‚Ä¢ Teste com caminho absoluto" . PHP_EOL;
    exit;
}

// Exibe o diret√≥rio raiz
echo "üìÅ modelo_v1/" . PHP_EOL;
echo "‚îÇ" . PHP_EOL;

// Exibe a estrutura
exibirEstrutura($caminhoFlutter, "");

echo PHP_EOL;
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" . PHP_EOL;
echo "‚úÖ Estrutura exibida com sucesso!" . PHP_EOL;
echo "üîó Acesse: http://127.0.0.1:56000/src/public/flutter/" . PHP_EOL;
?>